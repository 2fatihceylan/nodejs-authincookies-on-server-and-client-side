// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { isBlob, isWebReadableStream } from "./typeGuards";
export function toStream(source) {
    if (source instanceof Uint8Array) {
        return new Blob([source]).stream();
    }
    else if (isWebReadableStream(source)) {
        return source;
    }
    else if (isBlob(source)) {
        return source.stream();
    }
    else {
        throw new Error("Unsupported type. Only ReadableStream, Uint8Array and Blob are supported in browser");
    }
}
export function toWebStream(stream) {
    if (isWebReadableStream(stream)) {
        return stream;
    }
    else {
        throw new Error("Did not expect a Node stream in browser environment");
    }
}
export function concatenateStreams(streams) {
    var _a;
    const remainingStreams = Array.from(streams);
    let reader = (_a = remainingStreams.shift()) === null || _a === void 0 ? void 0 : _a.getReader();
    async function doPull(controller) {
        var _a;
        if (!reader) {
            controller.close();
            return;
        }
        let value;
        let done;
        try {
            ({ value, done } = await reader.read());
        }
        catch (e) {
            controller.error(e);
            reader.releaseLock();
            return;
        }
        if (done) {
            reader.releaseLock();
            reader = (_a = remainingStreams.shift()) === null || _a === void 0 ? void 0 : _a.getReader();
            await doPull(controller);
        }
        else {
            controller.enqueue(value);
        }
    }
    return new ReadableStream({
        pull(controller) {
            return doPull(controller);
        },
        cancel(reason) {
            reader === null || reader === void 0 ? void 0 : reader.cancel(reason);
        },
    });
}
//# sourceMappingURL=stream.browser.js.map