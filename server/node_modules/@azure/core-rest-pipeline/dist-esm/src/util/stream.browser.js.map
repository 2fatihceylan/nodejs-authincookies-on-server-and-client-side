{"version":3,"file":"stream.browser.js","sourceRoot":"","sources":["../../../src/util/stream.browser.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAE,MAAM,EAAE,mBAAmB,EAAE,MAAM,cAAc,CAAC;AAE3D,MAAM,UAAU,QAAQ,CACtB,MAA8E;IAE9E,IAAI,MAAM,YAAY,UAAU,EAAE;QAChC,OAAO,IAAI,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;KACpC;SAAM,IAAI,mBAAmB,CAAC,MAAM,CAAC,EAAE;QACtC,OAAO,MAAM,CAAC;KACf;SAAM,IAAI,MAAM,CAAC,MAAM,CAAC,EAAE;QACzB,OAAO,MAAM,CAAC,MAAM,EAAE,CAAC;KACxB;SAAM;QACL,MAAM,IAAI,KAAK,CACb,qFAAqF,CACtF,CAAC;KACH;AACH,CAAC;AAED,MAAM,UAAU,WAAW,CACzB,MAA0D;IAE1D,IAAI,mBAAmB,CAAC,MAAM,CAAC,EAAE;QAC/B,OAAO,MAAM,CAAC;KACf;SAAM;QACL,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC,CAAC;KACxE;AACH,CAAC;AAED,MAAM,UAAU,kBAAkB,CAChC,OAAqC;;IAErC,MAAM,gBAAgB,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC7C,IAAI,MAAM,GAAG,MAAA,gBAAgB,CAAC,KAAK,EAAE,0CAAE,SAAS,EAAE,CAAC;IAEnD,KAAK,UAAU,MAAM,CAAC,UAAuD;;QAC3E,IAAI,CAAC,MAAM,EAAE;YACX,UAAU,CAAC,KAAK,EAAE,CAAC;YACnB,OAAO;SACR;QAED,IAAI,KAA6B,CAAC;QAClC,IAAI,IAAyB,CAAC;QAE9B,IAAI;YACF,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;SACzC;QAAC,OAAO,CAAC,EAAE;YACV,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACpB,MAAM,CAAC,WAAW,EAAE,CAAC;YACrB,OAAO;SACR;QAED,IAAI,IAAI,EAAE;YACR,MAAM,CAAC,WAAW,EAAE,CAAC;YACrB,MAAM,GAAG,MAAA,gBAAgB,CAAC,KAAK,EAAE,0CAAE,SAAS,EAAE,CAAC;YAC/C,MAAM,MAAM,CAAC,UAAU,CAAC,CAAC;SAC1B;aAAM;YACL,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;SAC3B;IACH,CAAC;IAED,OAAO,IAAI,cAAc,CAAa;QACpC,IAAI,CAAC,UAAU;YACb,OAAO,MAAM,CAAC,UAAU,CAAC,CAAC;QAC5B,CAAC;QAED,MAAM,CAAC,MAAM;YACX,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,MAAM,CAAC,MAAM,CAAC,CAAC;QACzB,CAAC;KACF,CAAC,CAAC;AACL,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { isBlob, isWebReadableStream } from \"./typeGuards\";\n\nexport function toStream(\n  source: ReadableStream<Uint8Array> | NodeJS.ReadableStream | Uint8Array | Blob\n): ReadableStream<Uint8Array> | NodeJS.ReadableStream {\n  if (source instanceof Uint8Array) {\n    return new Blob([source]).stream();\n  } else if (isWebReadableStream(source)) {\n    return source;\n  } else if (isBlob(source)) {\n    return source.stream();\n  } else {\n    throw new Error(\n      \"Unsupported type. Only ReadableStream, Uint8Array and Blob are supported in browser\"\n    );\n  }\n}\n\nexport function toWebStream(\n  stream: ReadableStream<Uint8Array> | NodeJS.ReadableStream\n): ReadableStream<Uint8Array> {\n  if (isWebReadableStream(stream)) {\n    return stream;\n  } else {\n    throw new Error(\"Did not expect a Node stream in browser environment\");\n  }\n}\n\nexport function concatenateStreams(\n  streams: ReadableStream<Uint8Array>[]\n): ReadableStream<Uint8Array> {\n  const remainingStreams = Array.from(streams);\n  let reader = remainingStreams.shift()?.getReader();\n\n  async function doPull(controller: ReadableStreamDefaultController<Uint8Array>): Promise<void> {\n    if (!reader) {\n      controller.close();\n      return;\n    }\n\n    let value: Uint8Array | undefined;\n    let done: boolean | undefined;\n\n    try {\n      ({ value, done } = await reader.read());\n    } catch (e) {\n      controller.error(e);\n      reader.releaseLock();\n      return;\n    }\n\n    if (done) {\n      reader.releaseLock();\n      reader = remainingStreams.shift()?.getReader();\n      await doPull(controller);\n    } else {\n      controller.enqueue(value);\n    }\n  }\n\n  return new ReadableStream<Uint8Array>({\n    pull(controller) {\n      return doPull(controller);\n    },\n\n    cancel(reason) {\n      reader?.cancel(reason);\n    },\n  });\n}\n"]}