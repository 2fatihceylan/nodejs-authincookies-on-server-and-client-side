{"version":3,"file":"stream.js","sourceRoot":"","sources":["../../../src/util/stream.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;AAElC,OAAO,EAAE,QAAQ,EAAE,MAAM,QAAQ,CAAC;AAElC,OAAO,EAAE,MAAM,EAAE,oBAAoB,EAAE,mBAAmB,EAAE,MAAM,cAAc,CAAC;AAEjF,SAAgB,mBAAmB;;QAGjC,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;QAChC,IAAI;YACF,OAAO,IAAI,EAAE;gBACX,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,cAAM,MAAM,CAAC,IAAI,EAAE,CAAA,CAAC;gBAC5C,IAAI,IAAI,EAAE;oBACR,6BAAO;iBACR;gBAED,oBAAM,KAAK,CAAA,CAAC;aACb;SACF;gBAAS;YACR,MAAM,CAAC,WAAW,EAAE,CAAC;SACtB;IACH,CAAC;CAAA;AAED,SAAS,iBAAiB,CAAI,SAAc;IAC1C,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE;QACpC,SAAS,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,mBAAmB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KACvE;IAED,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE;QACrB,SAAS,CAAC,MAAM,GAAG,mBAAmB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KACxD;AACH,CAAC;AAED,SAAS,uBAAuB,CAAC,SAAqC;IACpE,iBAAiB,CAAa,SAAS,CAAC,CAAC;IACzC,OAAO,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;AACrC,CAAC;AAED,MAAM,UAAU,WAAW,CACzB,MAA0D;IAE1D,OAAO,mBAAmB,CAAC,MAAM,CAAC;QAChC,CAAC,CAAC,MAAM;QACR,CAAC,CAAE,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAgC,CAAC;AAC5E,CAAC;AAED,MAAM,UAAU,QAAQ,CACtB,MAA8E;IAE9E,IAAI,MAAM,YAAY,UAAU,EAAE;QAChC,OAAO,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;KAC3C;SAAM,IAAI,MAAM,CAAC,MAAM,CAAC,EAAE;QACzB,OAAO,uBAAuB,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;KACjD;SAAM,IAAI,oBAAoB,CAAC,MAAM,CAAC,EAAE;QACvC,OAAO,MAAM,CAAC;KACf;SAAM;QACL,OAAO,uBAAuB,CAAC,MAAM,CAAC,CAAC;KACxC;AACH,CAAC;AAED,MAAM,UAAU,kBAAkB,CAChC,OAA+D;IAE/D,IAAI,OAAO,CAAC,IAAI,CAAC,mBAAmB,CAAC,EAAE;QACrC,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;KACxD;IAED,OAAO,QAAQ,CAAC,IAAI,CAClB,CAAC;;;YACC,KAAK,MAAM,MAAM,IAAI,OAAkC,EAAE;;oBACvD,KAA0B,eAAA,0BAAA,cAAA,MAAM,CAAA,CAAA,YAAA,qFAAE;wBAAR,sBAAM;wBAAN,WAAM;wBAArB,MAAM,KAAK,KAAA,CAAA;wBACpB,oBAAM,KAAK,CAAA,CAAC;qBACb;;;;;;;;;aACF;QACH,CAAC;KAAA,CAAC,EAAE,CACL,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Readable } from \"stream\";\nimport { ReadableStream as AsyncIterableReadableStream } from \"stream/web\";\nimport { isBlob, isNodeReadableStream, isWebReadableStream } from \"./typeGuards\";\n\nasync function* streamAsyncIterator(\n  this: ReadableStream<Uint8Array>\n): AsyncIterableIterator<Uint8Array> {\n  const reader = this.getReader();\n  try {\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done) {\n        return;\n      }\n\n      yield value;\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n\nfunction makeAsyncIterable<T>(webStream: any): asserts webStream is AsyncIterableReadableStream<T> {\n  if (!webStream[Symbol.asyncIterator]) {\n    webStream[Symbol.asyncIterator] = streamAsyncIterator.bind(webStream);\n  }\n\n  if (!webStream.values) {\n    webStream.values = streamAsyncIterator.bind(webStream);\n  }\n}\n\nfunction nodeStreamFromWebStream(webStream: ReadableStream<Uint8Array>): NodeJS.ReadableStream {\n  makeAsyncIterable<Uint8Array>(webStream);\n  return Readable.fromWeb(webStream);\n}\n\nexport function toWebStream(\n  stream: ReadableStream<Uint8Array> | NodeJS.ReadableStream\n): ReadableStream<Uint8Array> {\n  return isWebReadableStream(stream)\n    ? stream\n    : (Readable.toWeb(Readable.from(stream)) as ReadableStream<Uint8Array>);\n}\n\nexport function toStream(\n  source: ReadableStream<Uint8Array> | NodeJS.ReadableStream | Uint8Array | Blob\n): NodeJS.ReadableStream | ReadableStream<Uint8Array> {\n  if (source instanceof Uint8Array) {\n    return Readable.from(Buffer.from(source));\n  } else if (isBlob(source)) {\n    return nodeStreamFromWebStream(source.stream());\n  } else if (isNodeReadableStream(source)) {\n    return source;\n  } else {\n    return nodeStreamFromWebStream(source);\n  }\n}\n\nexport function concatenateStreams(\n  sources: (ReadableStream<Uint8Array> | NodeJS.ReadableStream)[]\n): ReadableStream<Uint8Array> | NodeJS.ReadableStream {\n  if (sources.some(isWebReadableStream)) {\n    throw new Error(\"Was not expecting a Web stream here\");\n  }\n\n  return Readable.from(\n    (async function* () {\n      for (const stream of sources as NodeJS.ReadableStream[]) {\n        for await (const chunk of stream) {\n          yield chunk;\n        }\n      }\n    })()\n  );\n}\n"]}